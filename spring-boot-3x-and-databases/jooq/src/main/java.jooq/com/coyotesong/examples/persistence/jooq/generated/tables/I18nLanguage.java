/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.examples.persistence.jooq.generated.tables;


import com.coyotesong.examples.persistence.jooq.generated.Keys;
import com.coyotesong.examples.persistence.jooq.generated.Public;
import com.coyotesong.examples.persistence.jooq.generated.tables.records.I18nLanguageRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class I18nLanguage extends TableImpl<I18nLanguageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.i18n_language</code>
     */
    public static final I18nLanguage I18N_LANGUAGE = new I18nLanguage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<I18nLanguageRecord> getRecordType() {
        return I18nLanguageRecord.class;
    }

    /**
     * The column <code>public.i18n_language.key</code>.
     */
    public final TableField<I18nLanguageRecord, Integer> KEY = createField(DSL.name("key"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.i18n_language.code</code>.
     */
    public final TableField<I18nLanguageRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.i18n_language.hl</code>.
     */
    public final TableField<I18nLanguageRecord, String> HL = createField(DSL.name("hl"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.i18n_language.name</code>.
     */
    public final TableField<I18nLanguageRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    private I18nLanguage(Name alias, Table<I18nLanguageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private I18nLanguage(Name alias, Table<I18nLanguageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.i18n_language</code> table reference
     */
    public I18nLanguage(String alias) {
        this(DSL.name(alias), I18N_LANGUAGE);
    }

    /**
     * Create an aliased <code>public.i18n_language</code> table reference
     */
    public I18nLanguage(Name alias) {
        this(alias, I18N_LANGUAGE);
    }

    /**
     * Create a <code>public.i18n_language</code> table reference
     */
    public I18nLanguage() {
        this(DSL.name("i18n_language"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<I18nLanguageRecord, Integer> getIdentity() {
        return (Identity<I18nLanguageRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<I18nLanguageRecord> getPrimaryKey() {
        return Keys.I18N_LANGUAGE_PKEY;
    }

    @Override
    public I18nLanguage as(String alias) {
        return new I18nLanguage(DSL.name(alias), this);
    }

    @Override
    public I18nLanguage as(Name alias) {
        return new I18nLanguage(alias, this);
    }

    @Override
    public I18nLanguage as(Table<?> alias) {
        return new I18nLanguage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public I18nLanguage rename(String name) {
        return new I18nLanguage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public I18nLanguage rename(Name name) {
        return new I18nLanguage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public I18nLanguage rename(Table<?> name) {
        return new I18nLanguage(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public I18nLanguage where(Condition condition) {
        return new I18nLanguage(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public I18nLanguage where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public I18nLanguage where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public I18nLanguage where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public I18nLanguage where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public I18nLanguage where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public I18nLanguage where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public I18nLanguage where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public I18nLanguage whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public I18nLanguage whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
