/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.examples.persistence.jooq.generated.tables;


import com.coyotesong.examples.persistence.jooq.generated.Keys;
import com.coyotesong.examples.persistence.jooq.generated.Public;
import com.coyotesong.examples.persistence.jooq.generated.tables.records.I18nRegionRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class I18nRegion extends TableImpl<I18nRegionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.i18n_region</code>
     */
    public static final I18nRegion I18N_REGION = new I18nRegion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<I18nRegionRecord> getRecordType() {
        return I18nRegionRecord.class;
    }

    /**
     * The column <code>public.i18n_region.key</code>.
     */
    public final TableField<I18nRegionRecord, Integer> KEY = createField(DSL.name("key"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.i18n_region.code</code>.
     */
    public final TableField<I18nRegionRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.i18n_region.hl</code>.
     */
    public final TableField<I18nRegionRecord, String> HL = createField(DSL.name("hl"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.i18n_region.name</code>.
     */
    public final TableField<I18nRegionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.i18n_region.gl</code>.
     */
    public final TableField<I18nRegionRecord, String> GL = createField(DSL.name("gl"), SQLDataType.CLOB, this, "");

    private I18nRegion(Name alias, Table<I18nRegionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private I18nRegion(Name alias, Table<I18nRegionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.i18n_region</code> table reference
     */
    public I18nRegion(String alias) {
        this(DSL.name(alias), I18N_REGION);
    }

    /**
     * Create an aliased <code>public.i18n_region</code> table reference
     */
    public I18nRegion(Name alias) {
        this(alias, I18N_REGION);
    }

    /**
     * Create a <code>public.i18n_region</code> table reference
     */
    public I18nRegion() {
        this(DSL.name("i18n_region"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<I18nRegionRecord, Integer> getIdentity() {
        return (Identity<I18nRegionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<I18nRegionRecord> getPrimaryKey() {
        return Keys.I18N_REGION_PKEY;
    }

    @Override
    public I18nRegion as(String alias) {
        return new I18nRegion(DSL.name(alias), this);
    }

    @Override
    public I18nRegion as(Name alias) {
        return new I18nRegion(alias, this);
    }

    @Override
    public I18nRegion as(Table<?> alias) {
        return new I18nRegion(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public I18nRegion rename(String name) {
        return new I18nRegion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public I18nRegion rename(Name name) {
        return new I18nRegion(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public I18nRegion rename(Table<?> name) {
        return new I18nRegion(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public I18nRegion where(Condition condition) {
        return new I18nRegion(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public I18nRegion where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public I18nRegion where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public I18nRegion where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public I18nRegion where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public I18nRegion where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public I18nRegion where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public I18nRegion where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public I18nRegion whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public I18nRegion whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
